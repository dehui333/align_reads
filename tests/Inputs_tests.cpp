#include <chrono>
#include <gtest/gtest.h>
#include <iostream>

#include "../src/Inputs.cpp"

std::atomic<std::uint32_t> biosoup::NucleicAcid::num_objects{0};
std::shared_ptr<thread_pool::ThreadPool> pool = std::make_shared<thread_pool::ThreadPool>(10);
const char* fastq_path = "../test_data/reads.fastq";
const char* fasta_path = "../test_data/reads.fasta";

TEST(Inputs, read_fasta) {
    biosoup::NucleicAcid::num_objects = 0;
    auto sequences = align_reads::read_fasta(fasta_path);
    EXPECT_EQ(sequences.size(), 2);
    EXPECT_EQ(sequences[0]->name, "read1");
    EXPECT_EQ(sequences[0]->inflated_len, 240);
    EXPECT_EQ(sequences[1]->inflated_len, 84);
    EXPECT_EQ(sequences[0]->InflateData(), "ACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTG");
    EXPECT_EQ(sequences[0]->id, 0);
    EXPECT_EQ(sequences[1]->id, 1);
}

TEST(Inputs, read_fastq) {
    biosoup::NucleicAcid::num_objects = 0;
    auto sequences = align_reads::read_fastq(fastq_path);
    EXPECT_EQ(sequences.size(), 3165);
    EXPECT_EQ(sequences[0]->id, 0);
    EXPECT_EQ(sequences[0]->name, "49e202ae-bf1a-4a18-8590-3a3620b1b257");
    EXPECT_EQ(sequences[0]->InflateData(), "GTAGCCGCTTCGTTCAGTTGCGTATTGCTGCCACCGGCAGCACTTCAACTTGGCCCACCAGCACAAACAGCACAAAGCCCGGCAGCAACATTGCGGCACAGCAGAACAGCCCTCAAGTTCAAGGCGGCTATCGTTAATCAGATGTTTTATATCCCCGCACCAGTTCAACTTGTTCCTGCTGCTTCTCCTGTTGGCCAGCAGAGTCCGTGCTGCCAGCAAGCTGGCCACTCGGAGCAACAAAACATCGGGCTCATCGGCATCGGGAGTCGGAGCCGGAACAGCAGCAGCTTCGGCAGCGGCGGCGGCAGCGTCAGGAACACCCATTTTGGGATCATGCCATCGATTTGAATGACGATTTTCGCATACTATGGCAAATCGGTAATCAGGATATAACATTTGAAATACAGGCACGTACCCTGGGCTACGTCGGGTTCGGATTCTCGCCCGATGGCAATCTGGCTGATGCCGATATGGCCATCGGCTGGGTGAACAAGGGTCAAACCCTATTTTCAGGCCGAAGTGAAGCGCAAAATAAAACCCAGCACAAAGAAAGTTTTTGAGGGTGGGGTTTGGGCTGAATACCCGTAGATGGGGCTTCTGCTGGGCGCTAACGATTTTCATTCCCCGCAGAACGTTTCATTTTTCCAATGCGTGTGGACGAAAATTAAGGGCGGTCAGGCCGGCCGGCCAACTAAATGAAAAGTTGTCGCCCTAATATCGTAATTTATTCTGCTCATGGGCCTGCCGGAGTGGCCCAAGGAGCAGCGACCTCAGTGCCGCCGGAGCAATTGGTGCGTACATGGTGCTGGTACGCTGCTGGCAATCTGGAGATATTCAGCGAAAACTGCGTCAGAATGAACCTGGATTTGCCCGACTGGACACTGGAGCTGGTGGCAACCAACGATACGAGACGATGTGATTTGGTGGGTAAAAGTCAAGGATATGGTTTATAAGTTGCAAAAATAATGCGCATGTTCTTAACAGTTCCTGCAGAAGCACGCGATCCTGTTGGATGCAGCTGCTCTGGCAGCCATACTGACACTTCTCCCTGCTGCCCTTTCCGGAAATGCTCTACATGCAGGCCAGATAGCCAATCTCTCGGTGAGTACTTTCTTATGCTTGTTTTCCCAGCACCAGTAACAACTGAAATCCTGTCCAGACCACGGTGTTCCCGCAAGCCTTTCAGGAGGGACGGCGTCTATTCGCCTCCTCACACCAAACAGCGGAGGATGGACCTGCGCCGCGGCAGTTCCGTGAGATGTACAAAAAGAAACTGCAGATCAAGCGGAGCAATACGTA");
    EXPECT_EQ(sequences[3164]->id, 3164);
    EXPECT_EQ(sequences[3164]->name, "1b34a65d-b51b-4595-9132-bf9090b546d7");
    EXPECT_EQ(sequences[3164]->InflateData(), "GTACATGCTTCGTTCAGTTACGTATTGCTGAACGTTGCAGAAGTGCCAATGCCGCAAAGCAAAAGAAGCGAGACTTACAAATAAATAAATATACAATTGCAAAAAGTAAATCGTTTACCCTAAATTATGCTGGCTAACTTACACGTTTGTATCACTTTTCGCAAATAATTCGTTTGATTAAATTAATTTGAGGCCTTTGCACGAATACAAATAATGGTAATAGTTACAATAACTAAATCACGTTTTTGGTTGAAATCAATTTAGGGTTCCCCATTTCCAACTTCCATATGTTCTCCTAAAAGATATTGATCTGGAACTCGCTGACGATCCCCTCAAGGAAGTTCTTCAGGCTGTGGTACGAGTGGCTGCGCCAGCCAAATGTTGTTGTTCACCTGCTCCAGCGCCAACTCGATGGCCGATTCCACGGCATGGAGTCCCAGTTTACGGCAGGTAGCGGCCAAGTCCAGAAGCTGGTGCTTATGGTAGTCCTTGTTTAATAGATGGTCAGCGATTTGATCATCTCGGACAGCGTGGAGAAGCCATCGCCATAGCTATGGTGCAATTGAACATAACTAAATTAATATACATTCAACCAATCACACAAAGCATCACTTACTATTCGGCAATCTCCTTTATGTTGCCCTGCAGAAAATCAAAGGCTATCTCATGACCAATGGCATTGGAGGCCACAGCACGGAAGGCCAAGGCGCCATCCTGTTTTAGTACTTACAACGATGTTGGATTGATGGTCATGTTGAGGTACCTACAAAGTTGTTGCACATCAGTCTTTGGTCTTTGATGGATCAAACTATTGTAGTTACTCACTTGGACAGCAGCCAGGGTTTGGTGGTGCAGCCTTGAGGTCGAGTATCTCCTCCTTCTCGGAAGCACTCGCGGTTGACTTGTACTGTTTGTAGGCGAAATACCATTCCGGTGACGAGCCCTCCGCCAAGGAGGTGCAGTAGATCACAGACTTGGGGTTTGGCTTAATGCTGTTGATTTATGATTGCATCGTTTTTAATAAGTTTTTGTATTGTATTTCAGTTACAAGCTTACGGATTGTTTTTGGGATCACGCATCCACTCGCGGAACTTCATCTGCGCCTTTTGGGTACAGCAGTCGTAGTTGAACTTGCAGGCAAAGTAGGCCACCAAGGCACGGTGCTTCAATTGCAAGTGGGACTCGTGTCCGGCTCATGCAGGCCATAATGATCAAAGGCAGGACGTACGATGAATTTCATGAAGGCCTGGTTAAACAAAATATATTATAAAACACTCTAAAAGTTACTAGGTTTACTGGGTTCCACTACCCTGAAATCTCATAGGCAGGCTCCCTCTTCCAGGTTGTAGATCAGATAGTTGAGACCAGGTTTGGCGGCAATCCACAGCAGCTCATCATCCACAGCATCGAACAGCTCCATGAGAGTCCAATCTAAAGGCAAAAGTATTTTATGTTAATAATTTCATTTTACTTGTCTTACTTCTCAAACTTACGGTATGTCGTAGGTAAGATATTCCGCTTGCGACAGATGCAGTGCATCATCCAGCAACTGGGCCCTTGTGATCTGGGCAATGTGCTAAAAGTTCTTCTTGAGCGCCAGCCAGGAGGTCATATCGTAGTTGACCCTATAGTAACCCTGCCAGTTGAGATTCAGATAGATCACGTTATCGCTGTTGCTGCTATGCGCAAAGACATTGCCCACGATGAGCTCCTCTTCGTCCTGCTTCTCATCGGTGGGTGGGTATGTTGTCGCCCTTGCGCAACTCATCCCGTCTCGAGTGATGGGTATAAACCAGGTGCTCTGATCCGCAGTGTTCTTGGGAGGCAGCAGATAGCGTTCCTGGCGCAGCACGAGATCAGCACCACGACGCTCCATTGACCACCGGATAACCGGGCTGTGTGATCCACGAGTCCATGATCTGCTTGACACTCAGATCCTTGGGCAGAGTACCCTGTTCGTGACCATGGCGCGTGAGCATGGCCCACAGATCATCCTTGTCCATGTTTCCATAGGCGAACTTCTTTAGAAGATCGCGAGTGGCCGACAAGGCTACATCACCCACGATCGAATTGAGCATGCGCAGCAAGATAGTGCCCTTTGAGTAGCTGATGGGATCGAAAATCCGCCTGACATCGTTGGTGGAGCGCACATCAAAGGGGAAATGGCATGCGAGGTGTTGTCCGCATCGTGCTCCATCGACTCCTTAAACTCCAGCATGGTCAGTGTCCGCTCTGGAACTCCGGATGGGCGCTCCAGTGCCTTGTAGCTCATGTAGCAGGCGAAGCCCTCCTTCAGCCAGAGATCATCCCACCACTTCAGGGTCACTAGATTGCCGAGCCACTGATGGGCCAACTCGTGTGCAATGATTCCGGCCACCACCTGCATGTGTTCCGATGAGGACGCCAGCTGCAGATCCTCGGGCACCAGTAGCGCCGGATCGCGGAACGTTATAGCGGGTCCCCCAGTTTTCCATGGCAGCGAATCCAAAGTCGGCACGGACACCGTCAATTTGGGCAGCTTGTTCTTAATACCGAAGAGTCCTCGTAGTAGGGCAAGAATTTCGCACCATCTTGTACGCATAGTGAGTCATACCCACAAACTGGAGTCGCGTCCAGATCTCCACTCGCGGCGTCAACCCACTGTCACAGCTGGCAAGCCGCGAATCCACCATGTTGGACACGATGAAAGCCACGGGTAAGTGGGCATCTTCGGCGTGGTCTCGAAATCGTCTCTTATGAAACCACGGCGGGAAAACGCTTGCCCGACTTGGGCATGTTGGAAAGGGCCATCTTGAACTGCATGGGTCTGGCTTGATGCTGATCGAGAAGTTAGCTTTCATGTCCCGGACGGTGAAGCAGGGAAAGGCGCGACAGGCATCGACGGGCGAGAACTAGTGCTTATCATCCATCTAAAAGTAGGGAACTTTAGAAGGGGAACTTTCGTGGAGATGGTTCTGGACTTACTCCGCTTCATTCTTGGTGTCCGGATTGGTGTAGCTGGTCTTGTAGATGCGCTGCAGTGTATCCGTTACCTGGCTGACGAAATCAGACTTAGCAGCACTCTCAGTTGAGTCTCCACCGCCAAAGTCTTGCTCAAATTGATCACGAACGTGGCATTATCCTCCCCGTAGTCGCTGTAGAAATCCAAGTGCTTGCTCCTCGCTGGCATTGCTGGCGCCATCCGCAAGGGCACGGATCACCCGGGCATTGGAGATGCTCACGTTGTGCACGTCGAGCACGATGGGCTCCCAGCTGGTCACCTTGGACACATCCCGTTCGATCTCGATGGTCAGGCTGCGTTGCTGCTAGATGTTGCCACACTTGGCTCAATCAAAGGCTGGAAGATATCATATAGTTGAGAAGGTATCATATAAATAGATTCAAATAGGGAAATGCTCTGCATTTGCAGGTGAAATGCAAATGTTGGCCAAAAACGCCAGGTCGCTGCCATAAAAAGTGCCAATCAATCAATCAATGA"); 
}

TEST(Inputs, construct_index) {
    biosoup::NucleicAcid::num_objects = 0;
    auto sequences = align_reads::read_fasta(fasta_path);
    auto sequences2 = align_reads::read_fasta(fasta_path);
    sequences2.insert(sequences2.end(), std::make_move_iterator(sequences.begin()), std::make_move_iterator(sequences.end()));
    EXPECT_GT(sequences2[1]->id, sequences2[2]->id);
    auto id_to_pos_index = align_reads::construct_index(sequences2);
    for (std::uint32_t i = 0; i < id_to_pos_index.size(); i++) {
        EXPECT_EQ(sequences2[id_to_pos_index[i]]->id, i); 
    }
}

TEST(Inputs, read_fasta_or_fastq) {
    biosoup::NucleicAcid::num_objects = 0;
    auto sequences = align_reads::read_fasta_or_fastq(fasta_path);
    EXPECT_EQ(sequences.size(), 2);
    EXPECT_EQ(sequences[0]->name, "read1");
    EXPECT_EQ(sequences[0]->inflated_len, 240);
    EXPECT_EQ(sequences[1]->inflated_len, 84);
    EXPECT_EQ(sequences[0]->InflateData(), "ACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTG");
    EXPECT_EQ(sequences[0]->id, 0);
    EXPECT_EQ(sequences[1]->id, 1);

    biosoup::NucleicAcid::num_objects = 0;
    sequences = align_reads::read_fasta_or_fastq(fastq_path);
    EXPECT_EQ(sequences.size(), 3165);
    EXPECT_EQ(sequences[0]->id, 0);
    EXPECT_EQ(sequences[0]->name, "49e202ae-bf1a-4a18-8590-3a3620b1b257");
    EXPECT_EQ(sequences[0]->InflateData(), "GTAGCCGCTTCGTTCAGTTGCGTATTGCTGCCACCGGCAGCACTTCAACTTGGCCCACCAGCACAAACAGCACAAAGCCCGGCAGCAACATTGCGGCACAGCAGAACAGCCCTCAAGTTCAAGGCGGCTATCGTTAATCAGATGTTTTATATCCCCGCACCAGTTCAACTTGTTCCTGCTGCTTCTCCTGTTGGCCAGCAGAGTCCGTGCTGCCAGCAAGCTGGCCACTCGGAGCAACAAAACATCGGGCTCATCGGCATCGGGAGTCGGAGCCGGAACAGCAGCAGCTTCGGCAGCGGCGGCGGCAGCGTCAGGAACACCCATTTTGGGATCATGCCATCGATTTGAATGACGATTTTCGCATACTATGGCAAATCGGTAATCAGGATATAACATTTGAAATACAGGCACGTACCCTGGGCTACGTCGGGTTCGGATTCTCGCCCGATGGCAATCTGGCTGATGCCGATATGGCCATCGGCTGGGTGAACAAGGGTCAAACCCTATTTTCAGGCCGAAGTGAAGCGCAAAATAAAACCCAGCACAAAGAAAGTTTTTGAGGGTGGGGTTTGGGCTGAATACCCGTAGATGGGGCTTCTGCTGGGCGCTAACGATTTTCATTCCCCGCAGAACGTTTCATTTTTCCAATGCGTGTGGACGAAAATTAAGGGCGGTCAGGCCGGCCGGCCAACTAAATGAAAAGTTGTCGCCCTAATATCGTAATTTATTCTGCTCATGGGCCTGCCGGAGTGGCCCAAGGAGCAGCGACCTCAGTGCCGCCGGAGCAATTGGTGCGTACATGGTGCTGGTACGCTGCTGGCAATCTGGAGATATTCAGCGAAAACTGCGTCAGAATGAACCTGGATTTGCCCGACTGGACACTGGAGCTGGTGGCAACCAACGATACGAGACGATGTGATTTGGTGGGTAAAAGTCAAGGATATGGTTTATAAGTTGCAAAAATAATGCGCATGTTCTTAACAGTTCCTGCAGAAGCACGCGATCCTGTTGGATGCAGCTGCTCTGGCAGCCATACTGACACTTCTCCCTGCTGCCCTTTCCGGAAATGCTCTACATGCAGGCCAGATAGCCAATCTCTCGGTGAGTACTTTCTTATGCTTGTTTTCCCAGCACCAGTAACAACTGAAATCCTGTCCAGACCACGGTGTTCCCGCAAGCCTTTCAGGAGGGACGGCGTCTATTCGCCTCCTCACACCAAACAGCGGAGGATGGACCTGCGCCGCGGCAGTTCCGTGAGATGTACAAAAAGAAACTGCAGATCAAGCGGAGCAATACGTA");
    EXPECT_EQ(sequences[3164]->id, 3164);
    EXPECT_EQ(sequences[3164]->name, "1b34a65d-b51b-4595-9132-bf9090b546d7");
    EXPECT_EQ(sequences[3164]->InflateData(), "GTACATGCTTCGTTCAGTTACGTATTGCTGAACGTTGCAGAAGTGCCAATGCCGCAAAGCAAAAGAAGCGAGACTTACAAATAAATAAATATACAATTGCAAAAAGTAAATCGTTTACCCTAAATTATGCTGGCTAACTTACACGTTTGTATCACTTTTCGCAAATAATTCGTTTGATTAAATTAATTTGAGGCCTTTGCACGAATACAAATAATGGTAATAGTTACAATAACTAAATCACGTTTTTGGTTGAAATCAATTTAGGGTTCCCCATTTCCAACTTCCATATGTTCTCCTAAAAGATATTGATCTGGAACTCGCTGACGATCCCCTCAAGGAAGTTCTTCAGGCTGTGGTACGAGTGGCTGCGCCAGCCAAATGTTGTTGTTCACCTGCTCCAGCGCCAACTCGATGGCCGATTCCACGGCATGGAGTCCCAGTTTACGGCAGGTAGCGGCCAAGTCCAGAAGCTGGTGCTTATGGTAGTCCTTGTTTAATAGATGGTCAGCGATTTGATCATCTCGGACAGCGTGGAGAAGCCATCGCCATAGCTATGGTGCAATTGAACATAACTAAATTAATATACATTCAACCAATCACACAAAGCATCACTTACTATTCGGCAATCTCCTTTATGTTGCCCTGCAGAAAATCAAAGGCTATCTCATGACCAATGGCATTGGAGGCCACAGCACGGAAGGCCAAGGCGCCATCCTGTTTTAGTACTTACAACGATGTTGGATTGATGGTCATGTTGAGGTACCTACAAAGTTGTTGCACATCAGTCTTTGGTCTTTGATGGATCAAACTATTGTAGTTACTCACTTGGACAGCAGCCAGGGTTTGGTGGTGCAGCCTTGAGGTCGAGTATCTCCTCCTTCTCGGAAGCACTCGCGGTTGACTTGTACTGTTTGTAGGCGAAATACCATTCCGGTGACGAGCCCTCCGCCAAGGAGGTGCAGTAGATCACAGACTTGGGGTTTGGCTTAATGCTGTTGATTTATGATTGCATCGTTTTTAATAAGTTTTTGTATTGTATTTCAGTTACAAGCTTACGGATTGTTTTTGGGATCACGCATCCACTCGCGGAACTTCATCTGCGCCTTTTGGGTACAGCAGTCGTAGTTGAACTTGCAGGCAAAGTAGGCCACCAAGGCACGGTGCTTCAATTGCAAGTGGGACTCGTGTCCGGCTCATGCAGGCCATAATGATCAAAGGCAGGACGTACGATGAATTTCATGAAGGCCTGGTTAAACAAAATATATTATAAAACACTCTAAAAGTTACTAGGTTTACTGGGTTCCACTACCCTGAAATCTCATAGGCAGGCTCCCTCTTCCAGGTTGTAGATCAGATAGTTGAGACCAGGTTTGGCGGCAATCCACAGCAGCTCATCATCCACAGCATCGAACAGCTCCATGAGAGTCCAATCTAAAGGCAAAAGTATTTTATGTTAATAATTTCATTTTACTTGTCTTACTTCTCAAACTTACGGTATGTCGTAGGTAAGATATTCCGCTTGCGACAGATGCAGTGCATCATCCAGCAACTGGGCCCTTGTGATCTGGGCAATGTGCTAAAAGTTCTTCTTGAGCGCCAGCCAGGAGGTCATATCGTAGTTGACCCTATAGTAACCCTGCCAGTTGAGATTCAGATAGATCACGTTATCGCTGTTGCTGCTATGCGCAAAGACATTGCCCACGATGAGCTCCTCTTCGTCCTGCTTCTCATCGGTGGGTGGGTATGTTGTCGCCCTTGCGCAACTCATCCCGTCTCGAGTGATGGGTATAAACCAGGTGCTCTGATCCGCAGTGTTCTTGGGAGGCAGCAGATAGCGTTCCTGGCGCAGCACGAGATCAGCACCACGACGCTCCATTGACCACCGGATAACCGGGCTGTGTGATCCACGAGTCCATGATCTGCTTGACACTCAGATCCTTGGGCAGAGTACCCTGTTCGTGACCATGGCGCGTGAGCATGGCCCACAGATCATCCTTGTCCATGTTTCCATAGGCGAACTTCTTTAGAAGATCGCGAGTGGCCGACAAGGCTACATCACCCACGATCGAATTGAGCATGCGCAGCAAGATAGTGCCCTTTGAGTAGCTGATGGGATCGAAAATCCGCCTGACATCGTTGGTGGAGCGCACATCAAAGGGGAAATGGCATGCGAGGTGTTGTCCGCATCGTGCTCCATCGACTCCTTAAACTCCAGCATGGTCAGTGTCCGCTCTGGAACTCCGGATGGGCGCTCCAGTGCCTTGTAGCTCATGTAGCAGGCGAAGCCCTCCTTCAGCCAGAGATCATCCCACCACTTCAGGGTCACTAGATTGCCGAGCCACTGATGGGCCAACTCGTGTGCAATGATTCCGGCCACCACCTGCATGTGTTCCGATGAGGACGCCAGCTGCAGATCCTCGGGCACCAGTAGCGCCGGATCGCGGAACGTTATAGCGGGTCCCCCAGTTTTCCATGGCAGCGAATCCAAAGTCGGCACGGACACCGTCAATTTGGGCAGCTTGTTCTTAATACCGAAGAGTCCTCGTAGTAGGGCAAGAATTTCGCACCATCTTGTACGCATAGTGAGTCATACCCACAAACTGGAGTCGCGTCCAGATCTCCACTCGCGGCGTCAACCCACTGTCACAGCTGGCAAGCCGCGAATCCACCATGTTGGACACGATGAAAGCCACGGGTAAGTGGGCATCTTCGGCGTGGTCTCGAAATCGTCTCTTATGAAACCACGGCGGGAAAACGCTTGCCCGACTTGGGCATGTTGGAAAGGGCCATCTTGAACTGCATGGGTCTGGCTTGATGCTGATCGAGAAGTTAGCTTTCATGTCCCGGACGGTGAAGCAGGGAAAGGCGCGACAGGCATCGACGGGCGAGAACTAGTGCTTATCATCCATCTAAAAGTAGGGAACTTTAGAAGGGGAACTTTCGTGGAGATGGTTCTGGACTTACTCCGCTTCATTCTTGGTGTCCGGATTGGTGTAGCTGGTCTTGTAGATGCGCTGCAGTGTATCCGTTACCTGGCTGACGAAATCAGACTTAGCAGCACTCTCAGTTGAGTCTCCACCGCCAAAGTCTTGCTCAAATTGATCACGAACGTGGCATTATCCTCCCCGTAGTCGCTGTAGAAATCCAAGTGCTTGCTCCTCGCTGGCATTGCTGGCGCCATCCGCAAGGGCACGGATCACCCGGGCATTGGAGATGCTCACGTTGTGCACGTCGAGCACGATGGGCTCCCAGCTGGTCACCTTGGACACATCCCGTTCGATCTCGATGGTCAGGCTGCGTTGCTGCTAGATGTTGCCACACTTGGCTCAATCAAAGGCTGGAAGATATCATATAGTTGAGAAGGTATCATATAAATAGATTCAAATAGGGAAATGCTCTGCATTTGCAGGTGAAATGCAAATGTTGGCCAAAAACGCCAGGTCGCTGCCATAAAAAGTGCCAATCAATCAATCAATGA"); 

    EXPECT_THROW({align_reads::read_fasta_or_fastq("a.fastb");}, std::invalid_argument);
}

TEST(Inputs, read_sequences) {
    std::shared_ptr<thread_pool::ThreadPool> n = nullptr;
    std::vector<std::unique_ptr<biosoup::NucleicAcid>> sequences;
    // can read single? 
    sequences.clear();
    std::vector<std::string> paths {fastq_path};
    align_reads::read_sequences(sequences, paths, 0, n);
    EXPECT_EQ(sequences.size(), 3165);
    // can read multiple sequentially?
    sequences.clear();
    auto start1 = std::chrono::high_resolution_clock::now();
    paths = std::vector<std::string>(5, fastq_path);
    paths.push_back(fasta_path);
    align_reads::read_sequences(sequences, paths, 0, n);
    EXPECT_EQ(sequences.size(), 3165 * 5 + 2);
    auto stop1 = std::chrono::high_resolution_clock::now();
    auto duration1 = std::chrono::duration_cast<std::chrono::milliseconds>(stop1 - start1).count();
    // sequential indices correct? 
    std::uint32_t id = 0;
    for (auto& sequence : sequences) {
        EXPECT_TRUE(sequence->id == id++);          
    }
    // can read multiple in parallel?
    sequences.clear();
    auto start2 = std::chrono::high_resolution_clock::now();
    align_reads::read_sequences(sequences, paths, 0, pool);
    auto stop2 = std::chrono::high_resolution_clock::now();
    auto duration2 = std::chrono::duration_cast<std::chrono::milliseconds>(stop2 - start2).count();
    // when parallel, indices are not continous?
    id = 0;
    bool continuous = true;
    for (auto& sequence : sequences) {
        if (sequence->id != id++) {
            continuous = false;
            break;
        }
    }
    EXPECT_FALSE(continuous);
    // index constructed correctly?
    auto id_to_pos_index = align_reads::construct_index(sequences);
    for (std::uint32_t i = 0; i < id_to_pos_index.size(); i++) {
        EXPECT_EQ(sequences[id_to_pos_index[i]]->id, i); 
    }
    // parallel is faster?
    double times = (double) duration1/ duration2;
    EXPECT_GT(times, 3);
    // exception in thread detected?
    sequences.clear();
    paths = {fastq_path, fasta_path, "a.fastb"};
    EXPECT_THROW({align_reads::read_sequences(sequences, paths, 0, pool);}, std::invalid_argument);

}

TEST(Inputs, update_index) {
    std::vector<std::unique_ptr<biosoup::NucleicAcid>> sequences;
    std::vector<std::string> paths {fastq_path, fastq_path};
    align_reads::read_sequences(sequences, paths, 0, pool);
    // indices are not continous?
    std::uint32_t id = 0;
    bool continuous = true;
    for (auto& sequence : sequences) {
        if (sequence->id != id++) {
            continuous = false;
            break;
        }
    }
    EXPECT_FALSE(continuous);
    EXPECT_EQ(sequences.size(), 3165 * 2);
    // index initialized correctly?
    std::vector<std::uint32_t> id_to_pos_index;
    align_reads::update_index(id_to_pos_index, sequences);
    for (std::uint32_t i = 0; i < id_to_pos_index.size(); i++) {
        EXPECT_EQ(sequences[id_to_pos_index[i]]->id, i); 
    }
    // index updated correctly?
    align_reads::read_sequences(sequences, paths, sequences.size(), pool);
    EXPECT_EQ(sequences.size(), 3165 * 4);
    align_reads::update_index(id_to_pos_index, sequences);
    for (std::uint32_t i = 0; i < id_to_pos_index.size(); i++) {
        EXPECT_EQ(sequences[id_to_pos_index[i]]->id, i); 
    }
}

TEST(Inputs, class_Inputs) {
    
    std::vector<std::string> paths = {fastq_path, fastq_path};
    align_reads::Inputs inputs(2); 
    inputs.append_to_group(0, paths, pool);
    paths.push_back(fastq_path);
    inputs.append_to_group(1, paths, pool);
    EXPECT_EQ(inputs.get_group(0).size(), 3165 * 2);
    EXPECT_EQ(inputs.get_group(1).size(), 3165 * 3);
    inputs.index_group(0);
    inputs.index_group(1);
    EXPECT_EQ(inputs.get_id_in_group(0, 6000)->id, 6000);
    EXPECT_EQ(inputs.get_id_in_group(1, 9000)->id, 9000);
}