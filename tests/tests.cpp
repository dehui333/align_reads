#include <gtest/gtest.h>

#define private public
#include "align_reads/feature_generator.hpp"
#include "bioparser/fasta_parser.hpp"
#include "bioparser/fastq_parser.hpp"
#include "edlib.h"

const char* reads_fastq_path = "../test_data/reads.fastq";
const char* reads_fasta_path = "../test_data/reads.fasta";
const char* overlap_paf_path = "../test_data/overlap.paf";

// Demonstrate some basic assertions.
TEST(TrivialTests, BasicAssertions) {
    // Expect two strings not to be equal.
    EXPECT_STRNE("hello", "world");
    // Expect equality.
    EXPECT_EQ(7 * 6, 42);
}

TEST(BasicTests, Parse_Fasta) {
    auto p = bioparser::Parser<biosoup::NucleicAcid>::Create<bioparser::FastaParser>(reads_fasta_path);
    auto s = p->Parse(-1);
    EXPECT_EQ(2, s.size());
    uint32_t last = s.size() - 1;
    EXPECT_EQ(s[0]->name, "read1");
    EXPECT_EQ(s[0]->InflateData(), "ACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTG");
    EXPECT_EQ(s[last]->name, "read2");
    EXPECT_EQ(s[last]->InflateData(), "ACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTG");
}

TEST(BasicTests, Parse_Fastq) {
    // Quality string ignored for now 
    auto p = bioparser::Parser<biosoup::NucleicAcid>::Create<bioparser::FastqParser>(reads_fastq_path);
    auto s = p->Parse(-1);
    EXPECT_EQ(3165, s.size());
    uint32_t last = s.size() - 1;
    EXPECT_EQ(s[0]->name, "49e202ae-bf1a-4a18-8590-3a3620b1b257");
    EXPECT_EQ(s[0]->InflateData(), "GTAGCCGCTTCGTTCAGTTGCGTATTGCTGCCACCGGCAGCACTTCAACTTGGCCCACCAGCACAAACAGCACAAAGCCCGGCAGCAACATTGCGGCACAGCAGAACAGCCCTCAAGTTCAAGGCGGCTATCGTTAATCAGATGTTTTATATCCCCGCACCAGTTCAACTTGTTCCTGCTGCTTCTCCTGTTGGCCAGCAGAGTCCGTGCTGCCAGCAAGCTGGCCACTCGGAGCAACAAAACATCGGGCTCATCGGCATCGGGAGTCGGAGCCGGAACAGCAGCAGCTTCGGCAGCGGCGGCGGCAGCGTCAGGAACACCCATTTTGGGATCATGCCATCGATTTGAATGACGATTTTCGCATACTATGGCAAATCGGTAATCAGGATATAACATTTGAAATACAGGCACGTACCCTGGGCTACGTCGGGTTCGGATTCTCGCCCGATGGCAATCTGGCTGATGCCGATATGGCCATCGGCTGGGTGAACAAGGGTCAAACCCTATTTTCAGGCCGAAGTGAAGCGCAAAATAAAACCCAGCACAAAGAAAGTTTTTGAGGGTGGGGTTTGGGCTGAATACCCGTAGATGGGGCTTCTGCTGGGCGCTAACGATTTTCATTCCCCGCAGAACGTTTCATTTTTCCAATGCGTGTGGACGAAAATTAAGGGCGGTCAGGCCGGCCGGCCAACTAAATGAAAAGTTGTCGCCCTAATATCGTAATTTATTCTGCTCATGGGCCTGCCGGAGTGGCCCAAGGAGCAGCGACCTCAGTGCCGCCGGAGCAATTGGTGCGTACATGGTGCTGGTACGCTGCTGGCAATCTGGAGATATTCAGCGAAAACTGCGTCAGAATGAACCTGGATTTGCCCGACTGGACACTGGAGCTGGTGGCAACCAACGATACGAGACGATGTGATTTGGTGGGTAAAAGTCAAGGATATGGTTTATAAGTTGCAAAAATAATGCGCATGTTCTTAACAGTTCCTGCAGAAGCACGCGATCCTGTTGGATGCAGCTGCTCTGGCAGCCATACTGACACTTCTCCCTGCTGCCCTTTCCGGAAATGCTCTACATGCAGGCCAGATAGCCAATCTCTCGGTGAGTACTTTCTTATGCTTGTTTTCCCAGCACCAGTAACAACTGAAATCCTGTCCAGACCACGGTGTTCCCGCAAGCCTTTCAGGAGGGACGGCGTCTATTCGCCTCCTCACACCAAACAGCGGAGGATGGACCTGCGCCGCGGCAGTTCCGTGAGATGTACAAAAAGAAACTGCAGATCAAGCGGAGCAATACGTA");
    EXPECT_EQ(s[last]->name, "1b34a65d-b51b-4595-9132-bf9090b546d7");
    EXPECT_EQ(s[last]->InflateData(), "GTACATGCTTCGTTCAGTTACGTATTGCTGAACGTTGCAGAAGTGCCAATGCCGCAAAGCAAAAGAAGCGAGACTTACAAATAAATAAATATACAATTGCAAAAAGTAAATCGTTTACCCTAAATTATGCTGGCTAACTTACACGTTTGTATCACTTTTCGCAAATAATTCGTTTGATTAAATTAATTTGAGGCCTTTGCACGAATACAAATAATGGTAATAGTTACAATAACTAAATCACGTTTTTGGTTGAAATCAATTTAGGGTTCCCCATTTCCAACTTCCATATGTTCTCCTAAAAGATATTGATCTGGAACTCGCTGACGATCCCCTCAAGGAAGTTCTTCAGGCTGTGGTACGAGTGGCTGCGCCAGCCAAATGTTGTTGTTCACCTGCTCCAGCGCCAACTCGATGGCCGATTCCACGGCATGGAGTCCCAGTTTACGGCAGGTAGCGGCCAAGTCCAGAAGCTGGTGCTTATGGTAGTCCTTGTTTAATAGATGGTCAGCGATTTGATCATCTCGGACAGCGTGGAGAAGCCATCGCCATAGCTATGGTGCAATTGAACATAACTAAATTAATATACATTCAACCAATCACACAAAGCATCACTTACTATTCGGCAATCTCCTTTATGTTGCCCTGCAGAAAATCAAAGGCTATCTCATGACCAATGGCATTGGAGGCCACAGCACGGAAGGCCAAGGCGCCATCCTGTTTTAGTACTTACAACGATGTTGGATTGATGGTCATGTTGAGGTACCTACAAAGTTGTTGCACATCAGTCTTTGGTCTTTGATGGATCAAACTATTGTAGTTACTCACTTGGACAGCAGCCAGGGTTTGGTGGTGCAGCCTTGAGGTCGAGTATCTCCTCCTTCTCGGAAGCACTCGCGGTTGACTTGTACTGTTTGTAGGCGAAATACCATTCCGGTGACGAGCCCTCCGCCAAGGAGGTGCAGTAGATCACAGACTTGGGGTTTGGCTTAATGCTGTTGATTTATGATTGCATCGTTTTTAATAAGTTTTTGTATTGTATTTCAGTTACAAGCTTACGGATTGTTTTTGGGATCACGCATCCACTCGCGGAACTTCATCTGCGCCTTTTGGGTACAGCAGTCGTAGTTGAACTTGCAGGCAAAGTAGGCCACCAAGGCACGGTGCTTCAATTGCAAGTGGGACTCGTGTCCGGCTCATGCAGGCCATAATGATCAAAGGCAGGACGTACGATGAATTTCATGAAGGCCTGGTTAAACAAAATATATTATAAAACACTCTAAAAGTTACTAGGTTTACTGGGTTCCACTACCCTGAAATCTCATAGGCAGGCTCCCTCTTCCAGGTTGTAGATCAGATAGTTGAGACCAGGTTTGGCGGCAATCCACAGCAGCTCATCATCCACAGCATCGAACAGCTCCATGAGAGTCCAATCTAAAGGCAAAAGTATTTTATGTTAATAATTTCATTTTACTTGTCTTACTTCTCAAACTTACGGTATGTCGTAGGTAAGATATTCCGCTTGCGACAGATGCAGTGCATCATCCAGCAACTGGGCCCTTGTGATCTGGGCAATGTGCTAAAAGTTCTTCTTGAGCGCCAGCCAGGAGGTCATATCGTAGTTGACCCTATAGTAACCCTGCCAGTTGAGATTCAGATAGATCACGTTATCGCTGTTGCTGCTATGCGCAAAGACATTGCCCACGATGAGCTCCTCTTCGTCCTGCTTCTCATCGGTGGGTGGGTATGTTGTCGCCCTTGCGCAACTCATCCCGTCTCGAGTGATGGGTATAAACCAGGTGCTCTGATCCGCAGTGTTCTTGGGAGGCAGCAGATAGCGTTCCTGGCGCAGCACGAGATCAGCACCACGACGCTCCATTGACCACCGGATAACCGGGCTGTGTGATCCACGAGTCCATGATCTGCTTGACACTCAGATCCTTGGGCAGAGTACCCTGTTCGTGACCATGGCGCGTGAGCATGGCCCACAGATCATCCTTGTCCATGTTTCCATAGGCGAACTTCTTTAGAAGATCGCGAGTGGCCGACAAGGCTACATCACCCACGATCGAATTGAGCATGCGCAGCAAGATAGTGCCCTTTGAGTAGCTGATGGGATCGAAAATCCGCCTGACATCGTTGGTGGAGCGCACATCAAAGGGGAAATGGCATGCGAGGTGTTGTCCGCATCGTGCTCCATCGACTCCTTAAACTCCAGCATGGTCAGTGTCCGCTCTGGAACTCCGGATGGGCGCTCCAGTGCCTTGTAGCTCATGTAGCAGGCGAAGCCCTCCTTCAGCCAGAGATCATCCCACCACTTCAGGGTCACTAGATTGCCGAGCCACTGATGGGCCAACTCGTGTGCAATGATTCCGGCCACCACCTGCATGTGTTCCGATGAGGACGCCAGCTGCAGATCCTCGGGCACCAGTAGCGCCGGATCGCGGAACGTTATAGCGGGTCCCCCAGTTTTCCATGGCAGCGAATCCAAAGTCGGCACGGACACCGTCAATTTGGGCAGCTTGTTCTTAATACCGAAGAGTCCTCGTAGTAGGGCAAGAATTTCGCACCATCTTGTACGCATAGTGAGTCATACCCACAAACTGGAGTCGCGTCCAGATCTCCACTCGCGGCGTCAACCCACTGTCACAGCTGGCAAGCCGCGAATCCACCATGTTGGACACGATGAAAGCCACGGGTAAGTGGGCATCTTCGGCGTGGTCTCGAAATCGTCTCTTATGAAACCACGGCGGGAAAACGCTTGCCCGACTTGGGCATGTTGGAAAGGGCCATCTTGAACTGCATGGGTCTGGCTTGATGCTGATCGAGAAGTTAGCTTTCATGTCCCGGACGGTGAAGCAGGGAAAGGCGCGACAGGCATCGACGGGCGAGAACTAGTGCTTATCATCCATCTAAAAGTAGGGAACTTTAGAAGGGGAACTTTCGTGGAGATGGTTCTGGACTTACTCCGCTTCATTCTTGGTGTCCGGATTGGTGTAGCTGGTCTTGTAGATGCGCTGCAGTGTATCCGTTACCTGGCTGACGAAATCAGACTTAGCAGCACTCTCAGTTGAGTCTCCACCGCCAAAGTCTTGCTCAAATTGATCACGAACGTGGCATTATCCTCCCCGTAGTCGCTGTAGAAATCCAAGTGCTTGCTCCTCGCTGGCATTGCTGGCGCCATCCGCAAGGGCACGGATCACCCGGGCATTGGAGATGCTCACGTTGTGCACGTCGAGCACGATGGGCTCCCAGCTGGTCACCTTGGACACATCCCGTTCGATCTCGATGGTCAGGCTGCGTTGCTGCTAGATGTTGCCACACTTGGCTCAATCAAAGGCTGGAAGATATCATATAGTTGAGAAGGTATCATATAAATAGATTCAAATAGGGAAATGCTCTGCATTTGCAGGTGAAATGCAAATGTTGGCCAAAAACGCCAGGTCGCTGCCATAAAAAGTGCCAATCAATCAATCAATGA");
}

TEST(BasicTests, Construct_Generator_Fasta) {
    align_reads::FeatureGenerator gen_fasta {reads_fasta_path, 1, 15, 5, 0.001};
    EXPECT_EQ(gen_fasta.sequences.size(), 2);
    
    uint32_t last1 = gen_fasta.sequences.size() - 1;
    EXPECT_EQ(gen_fasta.sequences[0]->name, "read1");
    EXPECT_EQ(gen_fasta.sequences[0]->InflateData(), "ACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTG");
    EXPECT_EQ(gen_fasta.sequences[last1]->name, "read2");
    EXPECT_EQ(gen_fasta.sequences[last1]->InflateData(), "ACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTGACTG");    
}

TEST(BasicTests, Construct_Generator_Fastq) {
    align_reads::FeatureGenerator gen_fastq {reads_fastq_path, 3, 15, 10, 0.0002};
    EXPECT_EQ(gen_fastq.sequences.size(), 3165);
    std::uint32_t last_len = 1000000000;
    for (auto& s: gen_fastq.sequences) {
        EXPECT_LE(s->inflated_len, last_len);
        last_len = s->inflated_len;
    }
    std::uint32_t expected_pos_123 = gen_fastq.id_to_pos_index[123];
    EXPECT_EQ(gen_fastq.sequences[expected_pos_123]->id, 123);
}

TEST(ComponentTests, Encoder_Decoder) {
    EXPECT_EQ(align_reads::ENCODER['A'], 0);
    EXPECT_EQ(align_reads::ENCODER['C'], 1);
    EXPECT_EQ(align_reads::ENCODER['G'], 2);
    EXPECT_EQ(align_reads::ENCODER['T'], 3);
    EXPECT_EQ(align_reads::ENCODER['_'], 4);
    
    EXPECT_EQ(align_reads::DECODER[0], 'A');
    EXPECT_EQ(align_reads::DECODER[1], 'C');
    EXPECT_EQ(align_reads::DECODER[2], 'G');
    EXPECT_EQ(align_reads::DECODER[3], 'T');
    EXPECT_EQ(align_reads::DECODER[4], '_');
}

TEST(ComponentTests, aligning) {
    align_reads::FeatureGenerator gen_fasta {"../test_data/reads_align.fasta", 1, 15, 5, 0.001};
    auto result = gen_fasta.align(gen_fasta.sequences[0]);
    gen_fasta.print_align(result);
    
    
}